{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://api.shotstack.io/{version}",
      "variables": {
        "version": {
          "default": "v1",
          "enum": [
            "v1",
            "stage"
          ]
        }
      }
    }
  ],
  "info": {
    "description": "The Shotstack API is a video editing service that allows for the automated creation of videos using JSON. You can configure an edit and POST it to the Shotstack API which will render your video and provide a file location when complete. For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation.",
    "title": "Shotstack",
    "version": "v1",
    "x-apisguru-categories": [
      "media"
    ],
    "x-origin": [
      {
        "format": "openapi",
        "url": "https://raw.githubusercontent.com/shotstack/oas-api-definition/main/api.oas3.yaml",
        "version": "3.0"
      }
    ],
    "x-providerName": "shotstack.io",
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_apis.guru_assets_images_no-logo.svg"
    }
  },
  "paths": {
    "/render": {
      "post": {
        "description": "Queue and render the contents of a timeline as a video file.",
        "operationId": "postRender",
        "parameters": [
          {
            "description": "The id of a dedicated queue (enterprise customers only).",
            "example": "ENTERPRISE_QUEUE_ID",
            "in": "header",
            "name": "x-api-queue-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "output": {
                  "format": "mp4",
                  "resolution": "sd"
                },
                "timeline": {
                  "background": "#000000",
                  "soundtrack": {
                    "effect": "fadeInFadeOut",
                    "src": "https://s3-ap-northeast-1.amazonaws.com/my-bucket/music.mp3"
                  },
                  "tracks": [
                    {
                      "clips": [
                        {
                          "asset": {
                            "style": "minimal",
                            "text": "Hello World",
                            "type": "title"
                          },
                          "effect": "slideRight",
                          "length": 4,
                          "start": 0,
                          "transition": {
                            "in": "fade",
                            "out": "fade"
                          }
                        },
                        {
                          "asset": {
                            "src": "https://s3-ap-northeast-1.amazonaws.com/my-bucket/my-image.jpg",
                            "type": "image"
                          },
                          "effect": "zoomIn",
                          "filter": "greyscale",
                          "length": 4,
                          "start": 3
                        }
                      ]
                    },
                    {
                      "clips": [
                        {
                          "asset": {
                            "src": "https://s3-ap-northeast-1.amazonaws.com/my-bucket/my-clip-1.mp4",
                            "trim": 10.5,
                            "type": "video"
                          },
                          "length": 4.5,
                          "start": 7
                        },
                        {
                          "asset": {
                            "src": "https://s3-ap-northeast-1.amazonaws.com/my-bucket/my-clip-2.mp4",
                            "type": "video",
                            "volume": 0.5
                          },
                          "length": 5,
                          "start": 11.5,
                          "transition": {
                            "out": "wipeLeft"
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              "schema": {
                "$ref": "#/components/schemas/Edit"
              }
            }
          },
          "description": "The video edit specified using JSON.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Created",
                  "response": {
                    "id": "2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7",
                    "message": "Render Successfully Queued"
                  },
                  "success": true
                },
                "schema": {
                  "$ref": "#/components/schemas/QueuedResponse"
                }
              }
            },
            "description": "The queued video details"
          }
        },
        "security": [
          {
            "DeveloperKey": []
          }
        ],
        "summary": "Render Video",
        "tags": [
          "Endpoints"
        ]
      }
    },
    "/render/{id}": {
      "get": {
        "description": "Get the rendering status, video url and details of a timeline by ID.",
        "operationId": "getRender",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "message": "OK",
                  "response": {
                    "created": "2018-05-06T03:33:25.425Z",
                    "data": {
                      "output": {
                        "format": "mp4",
                        "resolution": "sd"
                      },
                      "timeline": {
                        "background": "#000000",
                        "soundtrack": {
                          "effect": "fadeInFadeOut",
                          "src": "https://s3-ap-northeast-1.amazonaws.com/my-bucket/music.mp3"
                        },
                        "tracks": [
                          {
                            "clips": [
                              {
                                "asset": {
                                  "style": "minimal",
                                  "text": "Hello World",
                                  "type": "title"
                                },
                                "effect": "slideRight",
                                "length": 4,
                                "start": 0,
                                "transition": {
                                  "in": "fade",
                                  "out": "fade"
                                }
                              },
                              {
                                "asset": {
                                  "src": "https://s3-ap-northeast-1.amazonaws.com/my-bucket/my-image.jpg",
                                  "type": "image"
                                },
                                "effect": "zoomIn",
                                "filter": "greyscale",
                                "length": 4,
                                "start": 3
                              }
                            ]
                          },
                          {
                            "clips": [
                              {
                                "asset": {
                                  "src": "https://s3-ap-northeast-1.amazonaws.com/my-bucket/my-clip-1.mp4",
                                  "trim": 10.5,
                                  "type": "video"
                                },
                                "length": 4.5,
                                "start": 7
                              },
                              {
                                "asset": {
                                  "src": "https://s3-ap-northeast-1.amazonaws.com/my-bucket/my-clip-2.mp4",
                                  "type": "video",
                                  "volume": 0.5
                                },
                                "length": 5,
                                "start": 11.5,
                                "transition": {
                                  "out": "wipeLeft"
                                }
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "id": "2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7",
                    "owner": "5ca6hu7s9k",
                    "status": "rendering",
                    "updated": "2018-05-06T03:33:48.521Z",
                    "url": "https://shotstack-api-v1-output.s3-ap-southeast-2.amazonaws.com/5ca6hu7s9k/2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7.mp4"
                  },
                  "success": true
                },
                "schema": {
                  "$ref": "#/components/schemas/RenderResponse"
                }
              }
            },
            "description": "The render status details"
          }
        },
        "security": [
          {
            "DeveloperKey": []
          }
        ],
        "summary": "Get Render Status",
        "tags": [
          "Endpoints"
        ]
      },
      "parameters": [
        {
          "description": "The id of the timeline render task in UUID format",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string"
          }
        }
      ]
    }
  },
  "components": {
    "callbacks": {},
    "examples": {},
    "headers": {},
    "links": {},
    "parameters": {},
    "requestBodies": {},
    "responses": {},
    "schemas": {
      "AudioAsset": {
        "description": "The AudioAsset is used to add sound effects and audio at specific intervals on the timeline. The src must be a publicly accessible URL to an audio resource such  as an mp3 file.",
        "properties": {
          "effect": {
            "description": "The effect to apply to the audio asset <ul>\n  <li>`fadeIn` - fade volume in only</li>\n  <li>`fadeOut` - fade volume out only</li>\n  <li>`fadeInFadeOut` - fade volume in and out</li>\n</ul>",
            "enum": [
              "fadeIn",
              "fadeOut",
              "fadeInFadeOut"
            ],
            "type": "string"
          },
          "src": {
            "description": "The audio source URL. The URL must be publicly accessible or include credentials.",
            "example": "https://s3-ap-northeast-1.amazonaws.com/my-bucket/sound.mp3",
            "type": "string"
          },
          "trim": {
            "description": "The start trim point of the audio clip, in seconds (defaults to 0). Audio will start from the in trim point. The audio will play until the file ends or the Clip length is reached.",
            "type": "number"
          },
          "type": {
            "default": "audio",
            "description": "The type of asset - set to `audio` for audio assets.",
            "type": "string"
          },
          "volume": {
            "default": 1,
            "description": "Set the volume for the audio clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).",
            "type": "number"
          }
        },
        "required": [
          "type",
          "src"
        ],
        "type": "object"
      },
      "Clip": {
        "description": "A clip is a container for a specific type of asset, i.e. a title, image, video, audio or html. You use a Clip to define when an asset will display on the timeline, how long it will play for and transitions, filters and effects to apply to it.",
        "properties": {
          "asset": {
            "description": "The type of asset to display for the duration of this Clip. Value must be one of <b>TitleAsset</b>, <b>ImageAsset</b>, <b>VideoAsset</b>, <b>HtmlAsset</b>, <b>AudioAsset</b> or <b>LumaAsset</b>",
            "oneOf": [
              {
                "$ref": "#/components/schemas/VideoAsset"
              },
              {
                "$ref": "#/components/schemas/ImageAsset"
              },
              {
                "$ref": "#/components/schemas/TitleAsset"
              },
              {
                "$ref": "#/components/schemas/HtmlAsset"
              },
              {
                "$ref": "#/components/schemas/AudioAsset"
              },
              {
                "$ref": "#/components/schemas/LumaAsset"
              }
            ]
          },
          "effect": {
            "description": "A motion effect to apply to the Clip. <ul>\n  <li>`zoomIn` - slow zoom in</li>\n  <li>`zoomOut` - slow zoom out</li>\n  <li>`slideLeft` - slow slide (pan) left</li>\n  <li>`slideRight` - slow slide (pan) right</li>\n  <li>`slideUp` - slow slide (pan) up</li>\n  <li>`slideDown` - slow slide (pan) down</li>\n</ul>",
            "enum": [
              "zoomIn",
              "zoomOut",
              "slideLeft",
              "slideRight",
              "slideUp",
              "slideDown"
            ],
            "type": "string"
          },
          "filter": {
            "description": "A filter effect to apply to the Clip. <ul>\n  <li>`boost` - boost contrast and saturation</li>\n  <li>`contrast` - increase contrast</li>\n  <li>`darken` - darken the scene</li>\n  <li>`greyscale` - remove colour</li>\n  <li>`lighten` - lighten the scene</li>\n  <li>`muted` - reduce saturation and contrast</li>\n  <li>`invert` - invert colors</li>\n</ul>",
            "enum": [
              "boost",
              "contrast",
              "darken",
              "greyscale",
              "lighten",
              "muted",
              "negative"
            ],
            "example": "greyscale",
            "type": "string"
          },
          "fit": {
            "default": "crop",
            "description": "Set how the asset should be scaled to fit the viewport using one of the following options: \n  <ul>\n    <li>`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.</li>\n    <li>`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.</li>\n    <li>`crop` - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.</li>\n    <li>`none` - preserves the original asset dimensions and does not apply any scaling.</li>\n  </ul>",
            "enum": [
              "cover",
              "contain",
              "crop",
              "none"
            ],
            "type": "string"
          },
          "length": {
            "description": "The length, in seconds, the Clip should play for.",
            "example": 5,
            "type": "number"
          },
          "offset": {
            "$ref": "#/components/schemas/Offset",
            "description": "Offset the location of the asset relative to it's position on the viewport. The offset distance is relative to the width of the viewport - for example an x offset of 0.5 will move the asset half the viewport width to the right."
          },
          "opacity": {
            "default": 1,
            "description": "Sets the opacity of the Clip where 1 is opaque and 0 is transparent.",
            "type": "number"
          },
          "position": {
            "default": "center",
            "description": "Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. <ul>\n  <li>`top` - top (center)</li>\n  <li>`topRight` - top right</li>\n  <li>`right` - right (center)</li>\n  <li>`bottomRight` - bottom right</li>\n  <li>`bottom` - bottom (center)</li>\n  <li>`bottomLeft` - bottom left</li>\n  <li>`left` - left (center)</li>\n  <li>`topLeft` - top left</li>\n  <li>`center` - center</li>\n</ul>",
            "enum": [
              "top",
              "topRight",
              "right",
              "bottomRight",
              "bottom",
              "bottomLeft",
              "left",
              "topLeft",
              "center"
            ],
            "type": "string"
          },
          "scale": {
            "description": "Scale the asset to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale asset to half the size of the viewport. This is useful for picture-in-picture video and  scaling images such as logos and watermarks.",
            "example": 0,
            "type": "number"
          },
          "start": {
            "description": "The start position of the Clip on the timeline, in seconds.",
            "example": 2,
            "type": "number"
          },
          "transition": {
            "$ref": "#/components/schemas/Transition"
          }
        },
        "required": [
          "asset",
          "start",
          "length"
        ],
        "type": "object"
      },
      "Crop": {
        "description": "Crop the sides of an asset by a relative amount. The size of the crop is specified using a scale between 0 and 1, relative to the screen width - i.e a left crop of 0.5 will crop half of the asset from the left, a top crop  of 0.25 will crop the top by quarter of the asset.",
        "properties": {
          "bottom": {
            "description": "Crop from the bottom of the asset",
            "example": 0.15,
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "left": {
            "description": "Crop from the left of the asset",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "right": {
            "description": "Crop from the left of the asset",
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "top": {
            "description": "Crop from the top of the asset",
            "example": 0.15,
            "format": "float",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          }
        },
        "type": "object"
      },
      "Edit": {
        "description": "An edit defines the content of the video in a timeline and the output format.",
        "properties": {
          "callback": {
            "description": "An optional webhook callback URL used to receive status notifications when a render completes or fails. See [webhooks](https://shotstack.gitbook.io/docs/guides/architecting-an-application/webhooks) for  more details.",
            "example": "https://my-server.com/callback.php",
            "type": "string"
          },
          "disk": {
            "default": "local",
            "description": "The disk type to use for storing footage and assets for each render. See [disk types](https://shotstack.gitbook.io/docs/guides/architecting-an-application/disk-types) for more details. <ul>\n  <li>`local` - optimised for high speed rendering with up to 512MB storage</li>\n  <li>`mount` - optimised for larger file sizes and longer videos with 5GB for source footage and 512MB for output render</li>\n</ul>",
            "enum": [
              "local",
              "mount"
            ],
            "type": "string"
          },
          "output": {
            "$ref": "#/components/schemas/Output"
          },
          "timeline": {
            "$ref": "#/components/schemas/Timeline"
          }
        },
        "required": [
          "timeline",
          "output"
        ],
        "type": "object"
      },
      "Font": {
        "description": "Download a custom font to use with the HTML asset type, using the font name in the CSS or font tag. See our [custom fonts](https://shotstack.io/learn/html-custom-fonts/) getting started guide for more details.",
        "properties": {
          "src": {
            "description": "The URL of the font file. The URL must be publicly accessible or include credentials.",
            "example": "https://s3-ap-northeast-1.amazonaws.com/my-bucket/open-sans.ttf",
            "type": "string"
          }
        },
        "required": [
          "src"
        ],
        "type": "object"
      },
      "HtmlAsset": {
        "description": "The HtmlAsset clip type lets you create text based layout and formatting using HTML and CSS. You can also set the height and width of a bounding box for the HTML content to sit within. Text and elements will wrap within the bounding box.",
        "properties": {
          "background": {
            "default": "transparent",
            "description": "Apply a background color behind the HTML bounding box using. Set the text color using hexadecimal  color notation. Transparency is supported by setting the first two characters of the hex string  (opposite to HTML), i.e. #80ffffff will be white with 50% transparency.",
            "type": "string"
          },
          "css": {
            "description": "The CSS text string to apply styling to the HTML. See list of  [support CSS properties](https://shotstack.gitbook.io/docs/guides/architecting-an-application/html-support#supported-html-tags).",
            "example": "p { color: #ffffff; } b { color: #ffff00; }",
            "type": "string"
          },
          "height": {
            "description": "Set the width of the HTML asset bounding box in pixels. Text and elements will be masked if they exceed the  height of the bounding box.",
            "example": 200,
            "type": "integer"
          },
          "html": {
            "description": "The HTML text string. See list of [supported HTML tags](https://shotstack.gitbook.io/docs/guides/architecting-an-application/html-support#supported-html-tags).",
            "example": "<p>Hello <b>World</b></p>",
            "type": "string"
          },
          "position": {
            "default": "center",
            "description": "Place the HTML in one of nine predefined positions within the HTML area. <ul>\n  <li>`top` - top (center)</li>\n  <li>`topRight` - top right</li>\n  <li>`right` - right (center)</li>\n  <li>`bottomRight` - bottom right</li>\n  <li>`bottom` - bottom (center)</li>\n  <li>`bottomLeft` - bottom left</li>\n  <li>`left` - left (center)</li>\n  <li>`topLeft` - top left</li>\n  <li>`center` - center</li>\n</ul>",
            "enum": [
              "top",
              "topRight",
              "right",
              "bottomRight",
              "bottom",
              "bottomLeft",
              "left",
              "topLeft",
              "center"
            ],
            "type": "string"
          },
          "type": {
            "default": "html",
            "description": "The type of asset - set to `html` for HTML.",
            "type": "string"
          },
          "width": {
            "description": "Set the width of the HTML asset bounding box in pixels. Text will wrap to fill the bounding box.",
            "example": 400,
            "type": "integer"
          }
        },
        "required": [
          "type",
          "html"
        ],
        "type": "object"
      },
      "ImageAsset": {
        "description": "The ImageAsset is used to create video from images. The src must be a publicly accessible URL to an image resource such as a jpg or png file.",
        "properties": {
          "crop": {
            "$ref": "#/components/schemas/Crop"
          },
          "src": {
            "description": "The image source URL. The URL must be publicly accessible or include credentials.",
            "example": "https://s3-ap-northeast-1.amazonaws.com/my-bucket/image.jpg",
            "type": "string"
          },
          "type": {
            "default": "image",
            "description": "The type of asset - set to `image` for images.",
            "type": "string"
          }
        },
        "required": [
          "type",
          "src"
        ],
        "type": "object"
      },
      "LumaAsset": {
        "description": "The LumaAsset is used to create luma matte transitions between other assets. A luma matte is  a grey scale animated video where the black areas are transparent and the white areas solid. The luma matte animation should be provided as an mp4 video file. The src must be a publicly  accessible URL to the file.",
        "properties": {
          "src": {
            "description": "The luma matte video source URL. The URL must be publicly accessible or include credentials.",
            "example": "https://s3-ap-northeast-1.amazonaws.com/my-bucket/mask.mp4",
            "type": "string"
          },
          "trim": {
            "description": "The start trim point of the luma video clip, in seconds (defaults to 0). Videos will start from the in trim point. The luma matte video will play until the file ends or the Clip length is reached.",
            "type": "number"
          },
          "type": {
            "default": "luma",
            "description": "The type of asset - set to `luma` for luma mattes.",
            "type": "string"
          }
        },
        "required": [
          "type",
          "src"
        ],
        "type": "object"
      },
      "Offset": {
        "description": "Offsets the position of an asset horizontally or vertically by a relative distance.",
        "properties": {
          "x": {
            "default": 0,
            "description": "Offset an asset on the horizontal axis (left or right), range varies from -1 to 1. Positive numbers move the asset right, negative left. For all assets except titles the distance moved is relative to the width  of the viewport - i.e. an X offset of 0.5 will move the asset half the  screen width to the right.",
            "example": 0.1,
            "format": "float",
            "maximum": 1,
            "minimum": -1,
            "type": "number"
          },
          "y": {
            "default": 0,
            "description": "Offset an asset on the vertical axis (up or down), range varies from -1 to 1. Positive numbers move the asset up, negative down. For all assets except titles the distance moved is relative to the height  of the viewport - i.e. an Y offset of 0.5 will move the asset up half the  screen height.",
            "example": -0.2,
            "format": "float",
            "maximum": 1,
            "minimum": -1,
            "type": "number"
          }
        },
        "type": "object"
      },
      "Output": {
        "description": "The output format, render range and type of media to generate.",
        "properties": {
          "aspectRatio": {
            "description": "The aspect ratio (shape) of the video. Useful for social media video. Options are: <ul>\n  <li>`16:9` - regular landscape/horizontal aspect ratio (default)</li>\n  <li>`9:16` - vertical/portrait aspect ratio</li>\n  <li>`1:1` - square aspect ratio</li>\n  <li>`4:5` - short vertical/portrait aspect ratio</li>\n</ul>",
            "enum": [
              "16:9",
              "9:16",
              "1:1",
              "4:5"
            ],
            "example": "16:9",
            "type": "string"
          },
          "format": {
            "description": "The output format and type of media file to generate. <ul>\n  <li>`mp4` - mp4 video file</li>\n  <li>`gif` - animated gif</li>\n  <li>`mp3` - mp3 audio file (no video)</li>\n</ul>",
            "enum": [
              "mp4",
              "gif",
              "mp3"
            ],
            "example": "mp4",
            "type": "string"
          },
          "fps": {
            "default": 25,
            "description": "Override the default frames per second. Useful for when the source footage is recorded at 30fps, i.e. on  mobile devices. Lower frame rates can be used to add cinematic quality (24fps) or to create smaller file size/faster render times or animated gifs (12 or 15fps). Default is 25fps. <ul>\n  <li>`12` - 12fps</li>\n  <li>`15` - 15fps</li>\n  <li>`24` - 24fps</li>\n  <li>`25` - 25fps</li>\n  <li>`30` - 30fps</li>\n</ul>",
            "enum": [
              12,
              15,
              24,
              25,
              30
            ],
            "example": 25,
            "type": "integer"
          },
          "poster": {
            "$ref": "#/components/schemas/Poster",
            "description": "Generate a poster image from a specific point on the timeline."
          },
          "range": {
            "$ref": "#/components/schemas/Range"
          },
          "resolution": {
            "description": "The output resolution of the video. <ul>\n  <li>`preview` - 512px x 288px @ 15fps</li>\n  <li>`mobile` - 640px x 360px @ 25fps</li>\n  <li>`sd` - 1024px x 576px @ 25fps</li>\n  <li>`hd` - 1280px x 720px @ 25fps</li>\n  <li>`1080` - 1920px x 1080px @ 25fps</li>\n</ul>",
            "enum": [
              "preview",
              "mobile",
              "sd",
              "hd",
              "1080"
            ],
            "example": "sd",
            "type": "string"
          },
          "scaleTo": {
            "description": "Override the resolution and scale the video to render at a different size. When using scaleTo the video should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the video at SD and the text will be scaled to the correct size. This is useful if you want to create multiple video sizes. <ul>\n  <li>`preview` - 512px x 288px @ 15fps</li>\n  <li>`mobile` - 640px x 360px @ 25fps</li>\n  <li>`sd` - 1024px x 576px @25fps</li>\n  <li>`hd` - 1280px x 720px @25fps</li>\n  <li>`1080` - 1920px x 1080px @25fps</li>\n</ul>",
            "enum": [
              "preview",
              "mobile",
              "sd",
              "hd",
              "1080"
            ],
            "type": "string"
          },
          "thumbnail": {
            "$ref": "#/components/schemas/Thumbnail",
            "description": "Generate a thumbnail image from a specific point on the timeline."
          }
        },
        "required": [
          "format",
          "resolution"
        ],
        "type": "object"
      },
      "Poster": {
        "description": "Generate a poster image for the video at a specific point from the timeline. The poster image size will match the size of the output video.",
        "properties": {
          "capture": {
            "description": "The point on the timeline in seconds to capture a single frame to use as the poster image.",
            "example": 1,
            "type": "number"
          }
        },
        "required": [
          "capture"
        ],
        "type": "object"
      },
      "QueuedResponse": {
        "properties": {
          "message": {
            "description": "`Created`, `Bad Request` or an error message.",
            "example": "Created",
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/QueuedResponseData",
            "description": "`QueuedResponseData` or an error message."
          },
          "success": {
            "description": "`true` if successfully queued, else `false`.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "success",
          "message",
          "response"
        ],
        "type": "object"
      },
      "QueuedResponseData": {
        "properties": {
          "id": {
            "description": "The id of the render task in UUID format.",
            "example": "2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7",
            "type": "string"
          },
          "message": {
            "description": "Success response message or error details.",
            "example": "Render Successfully Queued",
            "type": "string"
          }
        },
        "required": [
          "message",
          "id"
        ],
        "type": "object"
      },
      "Range": {
        "description": "Specify a time range to render, i.e. to render only a portion of a video or audio file. Omit this setting to  export the entire video.",
        "properties": {
          "length": {
            "description": "The length of the portion of the video to render - i.e. render 6 seconds of the video.",
            "example": 6,
            "format": "float",
            "minimum": 0,
            "type": "number"
          },
          "start": {
            "description": "The point on the timeline, in seconds, to start the render from - i.e. start at second 3.",
            "example": 3,
            "format": "float",
            "minimum": 0,
            "type": "number"
          }
        },
        "type": "object"
      },
      "RenderResponse": {
        "properties": {
          "message": {
            "description": "`OK` or an error message.",
            "example": "OK",
            "type": "string"
          },
          "response": {
            "$ref": "#/components/schemas/RenderResponseData",
            "description": "`RenderResponse` or an error message."
          },
          "success": {
            "description": "`true` if status available, else `false`.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "success",
          "message",
          "response"
        ],
        "type": "object"
      },
      "RenderResponseData": {
        "properties": {
          "created": {
            "description": "The time the render task was initially queued.",
            "example": "2020-10-30T09:42:29.446Z",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Edit",
            "description": "The timeline and output data to be rendered."
          },
          "duration": {
            "description": "The output video length in seconds.",
            "example": 8.5,
            "type": "number"
          },
          "error": {
            "description": "An error message, only displayed if an error occurred.",
            "example": "",
            "type": "string"
          },
          "id": {
            "description": "The id of the render task in UUID format.",
            "example": "2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7",
            "type": "string"
          },
          "owner": {
            "description": "The owner id of the render task.",
            "example": "ho6ve8x9q1",
            "type": "string"
          },
          "plan": {
            "description": "The customer subscription plan.",
            "example": "basic",
            "type": "string"
          },
          "poster": {
            "description": "The URL of the poster image if requested. This will only be available if status is done.",
            "example": "https://shotstack-api-v1-output.s3-ap-southeast-2.amazonaws.com/ho6ve8x9q1/2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7-poster.jpg",
            "type": "string"
          },
          "renderTime": {
            "description": "The time taken to render the video in milliseconds.",
            "example": 9433.44,
            "type": "number"
          },
          "status": {
            "description": "The status of the render task. <ul>\n  <li>`queued` - render is queued waiting to be rendered</li>\n  <li>`fetching` - assets are being fetched</li>\n  <li>`rendering` - the video is being rendered</li>\n  <li>`saving` - the final video is being saved to storage</li>\n  <li>`done` - the video is ready to be downloaded</li>\n  <li>`failed` - there was an error rendering the video</li>\n</ul>",
            "enum": [
              "queued",
              "fetching",
              "rendering",
              "saving",
              "done",
              "failed"
            ],
            "example": "done",
            "type": "string"
          },
          "thumbnail": {
            "description": "The URL of the thumbnail image if requested. This will only be available if status is done.",
            "example": "https://shotstack-api-v1-output.s3-ap-southeast-2.amazonaws.com/ho6ve8x9q1/2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7-thumb.jpg",
            "type": "string"
          },
          "updated": {
            "description": "The time the render status was last updated.",
            "example": "2020-10-30T09:42:39.168Z",
            "type": "string"
          },
          "url": {
            "description": "The URL of the final video. This will only be available if status is done.",
            "example": "https://shotstack-api-v1-output.s3-ap-southeast-2.amazonaws.com/ho6ve8x9q1/2abd5c11-0f3d-4c6d-ba20-235fc9b8e8b7.mp4",
            "type": "string"
          }
        },
        "required": [
          "status",
          "id",
          "owner",
          "data",
          "created",
          "updated"
        ],
        "type": "object"
      },
      "Soundtrack": {
        "description": "A music or audio file in mp3 format that plays for the duration of the rendered video or the length of the audio file, which ever is shortest.",
        "properties": {
          "effect": {
            "description": "The effect to apply to the audio file <ul>\n  <li>`fadeIn` - fade volume in only</li>\n  <li>`fadeOut` - fade volume out only</li>\n  <li>`fadeInFadeOut` - fade volume in and out</li>\n</ul>",
            "enum": [
              "fadeIn",
              "fadeOut",
              "fadeInFadeOut"
            ],
            "type": "string"
          },
          "src": {
            "description": "The URL of the mp3 audio file. The URL must be publicly accessible or include credentials.",
            "example": "https://s3-ap-northeast-1.amazonaws.com/my-bucket/music.mp3",
            "type": "string"
          },
          "volume": {
            "default": 1,
            "description": "Set the volume for the soundtrack between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).",
            "type": "number"
          }
        },
        "required": [
          "src"
        ],
        "type": "object"
      },
      "Thumbnail": {
        "description": "Generate a thumbnail image for the video at a specific point from the timeline.",
        "properties": {
          "capture": {
            "description": "The point on the timeline in seconds to capture a single frame to use as the thumbnail image.",
            "example": 1,
            "type": "number"
          },
          "scale": {
            "description": "Scale the thumbnail size to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale  the thumbnail to half the size of the viewport.",
            "example": 0.3,
            "type": "number"
          }
        },
        "required": [
          "capture",
          "scale"
        ],
        "type": "object"
      },
      "Timeline": {
        "description": "A timeline represents the contents of a video edit over time, in seconds. A timeline consists of layers called tracks. Tracks are composed of titles, images or video segments referred to as clips which are placed along the track at specific starting point and lasting for a specific amount of time.",
        "properties": {
          "background": {
            "default": "#000000",
            "description": "A hexadecimal value for the timeline background colour. Defaults to #000000 (black).",
            "type": "string"
          },
          "cache": {
            "default": true,
            "description": "Disable the caching of ingested source footage and assets. See  [caching](https://shotstack.gitbook.io/docs/guides/architecting-an-application/caching) for more details.",
            "type": "boolean"
          },
          "fonts": {
            "description": "An array of custom fonts to be downloaded for use by the HTML assets.",
            "items": {
              "$ref": "#/components/schemas/Font"
            },
            "type": "array"
          },
          "soundtrack": {
            "$ref": "#/components/schemas/Soundtrack",
            "description": "A music or audio soundtrack file in mp3 format."
          },
          "tracks": {
            "description": "A timeline consists of an array of tracks, each track containing clips. Tracks are layered on top of each other in the same order they are added to the array with the top most track layered over the top of those below it. Ensure that a track containing titles is the top most track so that it is displayed above videos and images.",
            "items": {
              "$ref": "#/components/schemas/Track"
            },
            "type": "array"
          }
        },
        "required": [
          "tracks"
        ],
        "type": "object"
      },
      "TitleAsset": {
        "description": "The TitleAsset clip type lets you create video titles from a text string and apply styling and positioning.",
        "properties": {
          "background": {
            "description": "Apply a background color behind the text. Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with 50% transparency. Omit to use transparent background.",
            "example": "#000000",
            "type": "string"
          },
          "color": {
            "default": "#ffffff",
            "description": "Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with  50% transparency.",
            "type": "string"
          },
          "offset": {
            "$ref": "#/components/schemas/Offset",
            "description": "Offset the location of the title relative to it's position on the screen."
          },
          "position": {
            "default": "center",
            "description": "Place the title in one of nine predefined positions of the viewport. <ul>\n  <li>`top` - top (center)</li>\n  <li>`topRight` - top right</li>\n  <li>`right` - right (center)</li>\n  <li>`bottomRight` - bottom right</li>\n  <li>`bottom` - bottom (center)</li>\n  <li>`bottomLeft` - bottom left</li>\n  <li>`left` - left (center)</li>\n  <li>`topLeft` - top left</li>\n  <li>`center` - center</li>\n</ul>",
            "enum": [
              "top",
              "topRight",
              "right",
              "bottomRight",
              "bottom",
              "bottomLeft",
              "left",
              "topLeft",
              "center"
            ],
            "type": "string"
          },
          "size": {
            "default": "medium",
            "description": "Set the relative size of the text using predefined sizes from xx-small to xx-large. <ul>\n  <li>`xx-small`</li>\n  <li>`x-small`</li>\n  <li>`small`</li>\n  <li>`medium`</li>\n  <li>`large`</li>\n  <li>`x-large`</li>\n  <li>`xx-large`</li>\n</ul>",
            "enum": [
              "xx-small",
              "x-small",
              "small",
              "medium",
              "large",
              "x-large",
              "xx-large"
            ],
            "type": "string"
          },
          "style": {
            "description": "Uses a preset to apply font properties and styling to the title. <ul>\n  <li>`minimal`</li>\n  <li>`blockbuster`</li>\n  <li>`vogue`</li>\n  <li>`sketchy`</li>\n  <li>`skinny`</li>\n  <li>`chunk`</li>\n  <li>`chunkLight`</li>\n  <li>`marker`</li>\n  <li>`future`</li>\n  <li>`subtitle`</li>\n</ul>",
            "enum": [
              "minimal",
              "blockbuster",
              "vogue",
              "sketchy",
              "skinny",
              "chunk",
              "chunkLight",
              "marker",
              "future",
              "subtitle"
            ],
            "type": "string"
          },
          "text": {
            "description": "The title text string - i.e. \"My Title\".",
            "example": "Hello World",
            "type": "string"
          },
          "type": {
            "default": "title",
            "description": "The type of asset - set to `title` for titles.",
            "type": "string"
          }
        },
        "required": [
          "type",
          "text"
        ],
        "type": "object"
      },
      "Track": {
        "description": "A track contains an array of clips. Tracks are layered on top of each other in the order in the array. The top most track will render on top of those below it.",
        "properties": {
          "clips": {
            "description": "An array of Clips comprising of TitleClip, ImageClip or VideoClip.",
            "items": {
              "$ref": "#/components/schemas/Clip"
            },
            "type": "array"
          }
        },
        "required": [
          "clips"
        ],
        "type": "object"
      },
      "Transition": {
        "description": "In and out transitions for a clip - i.e. fade in and fade out",
        "properties": {
          "in": {
            "description": "The transition in. Available transitions are:\n  <ul>\n    <li>`fade` - fade in</li>\n    <li>`reveal` - reveal from left to right</li>\n    <li>`wipeLeft` - fade across screen to the left</li>\n    <li>`wipeRight` - fade across screen to the right</li>\n    <li>`slideLeft` - move slightly left and fade in</li>\n    <li>`slideRight` - move slightly right and fade in</li>\n    <li>`slideUp` - move slightly up and fade in</li>\n    <li>`slideDown` - move slightly down and fade in</li>\n    <li>`carouselLeft` - slide in from right to left</li>\n    <li>`carouselRight` - slide in from left to right</li>\n    <li>`carouselUp` - slide in from bottom to top</li>\n    <li>`carouselDown` - slide in from top  to bottom</li>\n    <li>`zoom` - fast zoom in</li>\n  </ul>",
            "enum": [
              "fade",
              "reveal",
              "wipeLeft",
              "wipeRight",
              "slideLeft",
              "slideRight",
              "slideUp",
              "slideDown",
              "carouselLeft",
              "carouselRight",
              "carouselUp",
              "carouselDown",
              "zoom"
            ],
            "type": "string"
          },
          "out": {
            "description": "The transition out. Available transitions are:\n  <ul>\n    <li>`fade` - fade out</li>\n    <li>`reveal` - reveal from right to left</li>\n    <li>`wipeLeft` - fade across screen to the left</li>\n    <li>`wipeRight` - fade across screen to the right</li>\n    <li>`slideLeft` - move slightly left and fade out</li>\n    <li>`slideRight` - move slightly right and fade out</li>\n    <li>`slideUp` - move slightly up and fade out</li>\n    <li>`slideDown` - move slightly down and fade out</li>\n    <li>`carouselLeft` - slide out from right to left</li>\n    <li>`carouselRight` - slide out from left to right</li>\n    <li>`carouselUp` - slide out from bottom to top</li>\n    <li>`carouselDown` - slide out from top  to bottom</li>\n    <li>`zoom` - fast zoom out</li>\n  </ul>",
            "enum": [
              "fade",
              "reveal",
              "wipeLeft",
              "wipeRight",
              "slideLeft",
              "slideRight",
              "slideUp",
              "slideDown",
              "carouselLeft",
              "carouselRight",
              "carouselUp",
              "carouselDown",
              "zoom"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "VideoAsset": {
        "description": "The VideoAsset is used to create video sequences from video files. The src must be a publicly accessible URL to a video resource such as an mp4 file.",
        "properties": {
          "crop": {
            "$ref": "#/components/schemas/Crop"
          },
          "src": {
            "description": "The video source URL. The URL must be publicly accessible or include credentials.",
            "example": "https://s3-ap-northeast-1.amazonaws.com/my-bucket/video.mp4",
            "type": "string"
          },
          "trim": {
            "description": "The start trim point of the video clip, in seconds (defaults to 0). Videos will start from the in trim point. The video will play until the file ends or the Clip length is reached.",
            "example": 2,
            "type": "number"
          },
          "type": {
            "default": "video",
            "description": "The type of asset - set to `video` for videos.",
            "type": "string"
          },
          "volume": {
            "description": "Set the volume for the video clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 0).",
            "example": 1,
            "type": "number"
          }
        },
        "required": [
          "type",
          "src"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "DeveloperKey": {
        "description": "Set the **x-api-key** header with your provided key for the correct environment (v1 or stage). Include the header in all calls to the API that are secured with a key.",
        "in": "header",
        "name": "x-api-key",
        "type": "apiKey"
      }
    }
  }
}