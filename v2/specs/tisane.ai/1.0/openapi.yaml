openapi: 3.0.1
servers:
  - url: http://api.tisane.ai
  - url: https://api.tisane.ai
info:
  contact:
    x-twitter: TisaneLabs
  description: <table><tr><td
    style="font-size:large">&nbsp;&nbsp;üî¨&nbsp;&nbsp;&nbsp;</td><td>Detect
    abusive content, obtain sentiment analysis, extract entities, detect topics,
    automatically correct spelling errors, and more.</td></tr></table>
  title: Text Analysis
  version: "1.0"
  x-apisguru-categories:
    - text
  x-logo:
    url: https://api.apis.guru/v2/cache/logo/https_twitter.com_TisaneLabs_profile_image.jpeg
  x-origin:
    - converter:
        url: https://github.com/mermade/oas-kit
        version: 7.0.4
      format: openapi
      url: https://dev.tisane.ai/docs/services/5a3b6668a3511b11cc292655/export?DocumentFormat=openapi
      version: "3.0"
  x-providerName: tisane.ai
security:
  - apiKeyHeader: []
  - apiKeyQuery: []
paths:
  /compare/entities:
    post:
      description: "Compares two compound named entities and outputs the differences
        found. "
      operationId: compare-named-entities
      requestBody:
        content:
          application/json:
            example:
              entity1: Gary Youngman MD
              entity2: Gary Oldman
              language1: en
              language2: en
              type: person
        description: >
          The request body is a JSON structure made of the following
          elements:


          * `language1` (string) - a standard IETF tag for the language of the first entity

          * `entity1` (string) - 1st entity

          * `language2` (string) - a standard IETF tag for the language of the second entity

          * `entity2` (string) - 2nd entity

          * `type` (string) - the type of the entity. Currently only _person_ is supported
      responses:
        "200":
          content:
            application/json:
              example:
                differences:
                  - surname
                  - social_role
                result: different
          description: >-
            A JSON structure containing the comparison result and the different
            segments, if applicable. The elements are:


            * `result` (string) - the result of the comparison. Values: 
              * `no_single_entity` - at least one of the entity parameters could not be parsed as a single entity. 
              * `same` - it's the same entity, even if the order is different. Note that changing the order may mean the same or different name. For example, _Kevin Tan_ is the same as _Tan Kevin_, but _James David_ is not the same as _David James_.
              * `different` - there are differences between the entities. They are listed in the _differences_ element as described below. 
            * `differences` (array of strings) - the different segments. Currently supported:
              * `given_name`
              * `surname`
              * `title` - Mr., Mrs., etc.
              * `social_role` - academic degrees, etc.
              * `suffix`
              * `variation` - substantially the same; the only difference is a style (e.g. hypocorism or colloquial vs formal) or a language or a spelling
      summary: Named entity comparison
  /detectLanguage:
    post:
      description: Detects the languages used in the specified text fragment. Returns
        the breakdown by offsets.
      operationId: detect-language
      requestBody:
        content:
          application/json:
            example:
              content: "—Å–∫—É—à–∞–π\r\nmuffin\r\n◊õ◊§◊ê◊®◊î"
              delimiter: "[\\r\\n]"
              languages: en|ru|th|he
        description: >
          A request is made of three elements:

            + `content` - a text fragment to analyze
            + `languages` - (optional) a comma-delimited or vertical bar-delimited list of language codes to choose from; used for intelligent cues
            + `delimiter` - (optional) a regular expression to segment the fragment; by default, languages are detected globally
      responses:
        "200":
          content:
            application/json:
              example:
                languages:
                  - language: ru
                    length: 7
                    offset: 0
                    score: 866
                  - language: en
                    length: 7
                    offset: 8
                    score: 731
                  - language: he
                    length: 6
                    offset: 16
                    score: 1024
          description: The breakdown of detected languages
      summary: Detect language
      tags:
        - detect
  /helper/extract_text:
    post:
      description: "A service method to remove JavaScript, CSS tags, JSON, and other
        markup, returning pure decoded text. "
      operationId: clean-up-text
      requestBody:
        content:
          text/plain:
            example: <p>Clean me up</p> <style>/* I'm a super kewl programmer dude who likes
              to leave comments. Who needs style when analyzing text? */</style>
        description: Text to clean up.
      responses:
        "200":
          content:
            text/plain:
              example: Clean me up
          description: The text without markup, script, CSS, JSON.
      summary: Text clean up
  /languages:
    get:
      description: Obtain a list of available languages. No parameters.
      operationId: 5a4c8182a3511b120c2e80bd
      responses:
        "200":
          content:
            application/json:
              example:
                - englishName: Arabic
                  id: ar
                  latin: false
                  name: ÿßŸÑÿπÿ±ÿ®Ÿäÿ©
                  nativeEncoding: iso-8859-6
                  preferredFont: Arial
                  rightToLeft: true
                - englishName: Danish
                  id: da
                  latin: true
                  name: Dansk
                  nativeEncoding: iso-8859-1
                  preferredFont: Calibri
                - englishName: German
                  id: de
                  latin: true
                  name: Deutsch
                  nativeEncoding: iso-8859-1
                  preferredFont: Calibri
                - englishName: English
                  id: en
                  latin: true
                  name: English
                  nativeEncoding: iso-8859-1
                  preferredFont: Arial
                  systemLanguage: true
                - englishName: Spanish
                  id: es
                  latin: true
                  name: Espa√±ol
                  nativeEncoding: iso-8859-1
                  preferredFont: Verdana
                - englishName: Persian
                  id: fa
                  latin: false
                  name: ŸÅÿßÿ±ÿ≥Ÿä
                  nativeEncoding: iso-8859-6
                  preferredFont: Arial
                  rightToLeft: true
                - englishName: Finnish
                  id: fi
                  latin: true
                  name: suomi
                  nativeEncoding: iso-8859-1
                  preferredFont: Berlin Sans FB
                - englishName: French
                  id: fr
                  latin: true
                  name: Fran√ßais
                  nativeEncoding: iso-8859-1
                  preferredFont: Arial
                - englishName: Hebrew
                  id: he
                  latin: false
                  name: ◊¢◊ë◊®◊ô◊™
                  nativeEncoding: iso-8859-8
                  preferredFont: Courier New
                  rightToLeft: true
                - englishName: Indonesian
                  id: id
                  latin: true
                  name: Bahasa Indonesia
                  nativeEncoding: iso-8859-1
                  preferredFont: Book Antiqua
                - englishName: Italian
                  id: it
                  latin: true
                  name: Italiano
                  nativeEncoding: iso-8859-1
                  preferredFont: Book Antiqua
                - englishName: Japanese
                  id: ja
                  latin: false
                  name: Êó•Êú¨Ë™û
                  nativeEncoding: ISO-2022
                  preferredFont: MS Mincho
                - englishName: Korean
                  id: ko
                  latin: false
                  name: ÌïúÍµ≠Ïñ¥
                  nativeEncoding: EUC-KR
                  preferredFont: Arial Narrow
                - englishName: Malay
                  id: ms
                  latin: true
                  name: Bahasa Melayu
                  nativeEncoding: iso-8859-1
                  preferredFont: Calibri
                - englishName: Dutch
                  id: nl
                  latin: true
                  name: Nederlands
                  nativeEncoding: iso-8859-1
                  preferredFont: Arial
                - englishName: Norwegian
                  id: no
                  latin: true
                  name: Norsk
                  nativeEncoding: iso-8859-1
                  preferredFont: Book Antiqua
                - englishName: Polish
                  id: pl
                  latin: true
                  name: Polski
                  nativeEncoding: iso-8859-2
                  preferredFont: Arial
                - englishName: Pashto
                  id: ps-AF
                  latin: false
                  name: Ÿæ⁄öÿ™Ÿà
                  nativeEncoding: iso-8859-6
                  preferredFont: Pashto Kror Asiatype
                  rightToLeft: true
                - englishName: Portuguese
                  id: pt
                  latin: true
                  name: Portugu√™s
                  nativeEncoding: iso-8859-1
                  preferredFont: Book Antiqua
                - englishName: Russian
                  id: ru
                  latin: false
                  name: —Ä—É—Å—Å–∫–∏–π
                  nativeEncoding: iso-8859-5
                  preferredFont: Verdana
                - englishName: Swedish
                  id: sv
                  latin: true
                  name: Svenska
                  nativeEncoding: iso-8859-1
                  preferredFont: Lucida Console
                - englishName: Thai
                  id: th
                  latin: false
                  name: ‡πÑ‡∏ó‡∏¢
                  nativeEncoding: iso-8859-11
                  preferredFont: Tahoma
                - englishName: Turkish
                  id: tr
                  latin: true
                  name: T√ºrk√ße
                  nativeEncoding: iso-8859-9
                  preferredFont: Arial
                - englishName: Urdu
                  id: ur
                  latin: false
                  name: ÿßÿ±ÿØŸà
                  nativeEncoding: iso-8859-6
                  preferredFont: Arial
                  rightToLeft: true
                - englishName: Vietnamese
                  id: vi
                  latin: true
                  name: Ti·∫øng Vi·ªát
                  nativeEncoding: iso-8859-1
                  preferredFont: Arial
                - englishName: Simplified Chinese
                  id: zh-CN
                  latin: false
                  name: ÁÆÄ‰Ωì‰∏≠Êñá
                  nativeEncoding: gb18030
                  preferredFont: NSimSun
                - englishName: Traditional Chinese
                  id: zh-TW
                  latin: false
                  name: ÁπÅÈ´î‰∏≠Êñá
                  nativeEncoding: utf-8
                  preferredFont: Arial Unicode MS
          description: >-
            An array of elements containing basic info for the supported
            languages. Every array member contains:


            * `id` (string) - a standard IETF language tag

            * `name` (string) - a native name of the language

            * `englishName` (string) - the English name of the language

            * `nativeEncoding` (string) - the encoding of the language

            * `preferredFont` (string) - a font family known to be compatible with the language

            * `latin` (boolean) - _true_ if the language uses Latin script, _false_ otherwise

            * `rightToLeft` (boolean) - _true_ if the language uses a bidirectional script (e.g. Arabic, Persian, Hebrew), _false_ otherwise
      summary: List available languages
  /parse:
    post:
      description: >+
        The method analyzes the input, returning high-level and low-level
        metadata. 


        The request body is a JSON structure made of three elements:


        * `language` (string) - a standard IETF tag for the language to analyze

        * `content` (string) - a content to analyze

        * `settings` (structure) - the [settings](#settings-reference) to apply when analyzing


        Example: 

        ```json

        {"language": "en", "content":"Hello Tisane API!", "settings": {}}

        ```



        ### Response Reference


        * [Abusive Content](#abusive-content)

        * [Sentiment Analysis](#sentiment-analysis)

        * [Entities](#entities)
          + [Entity Types & Subtypes](#entity-types-and-subtypes)
        * [Topics](#topics)

        * [Advanced Low-Level Data: Sentences, Phrases, and Words](#advanced-low-level-data-sentences-phrases-and-words)
          + [Words](#words)
            - [Advanced](#advanced)
          + [Parse Trees & Phrases](#parse-trees-and-phrases)
          + [Context-Aware Spelling Correction](#context-aware-spelling-correction)

        The response contains several sections which are displayed or hidden according to the [settings](#output-customization). 


        The common attributes are:


        * `text` (string) - the original input

        * `reduced_output` (boolean) - if the input is too big, and verbose information like the lexical chunk was requested, the verbose information will not be generated, and this flag will be set to `true` and returned as part of the response

        * `sentiment` (floating-point number) - a number in range -1 to 1 indicating the document-level sentiment. Only shown when `document_sentiment` [setting](#output-customization) is set to `true`.

        * `signal2noise` (floating-point number) - a signal to noise ranking of the text, in relation to the array of concepts specified in the `relevant` [setting](#signal-to-noise-ranking). Only shown when the `relevant` setting exists.


        ### Abusive Content


        The `abuse` section is an array of detected instances of content that may violate some terms of use. **NOTE**: the terms of use in online communities may vary, and so it is up to the administrators to determine whether the content is indeed abusive. For instance, it makes no sense to restrict sexual advances in a dating community, or censor profanities when it's accepted in the bulk of the community. 


        The section exists if instances of abuse are detected and the `abuse` [setting](#output-customization) is either omitted or set to `true`.


        Every instance contains the following attributes:


        * `offset` (unsigned integer) - zero-based offset where the instance starts

        * `length` (unsigned integer) - length of the content

        * `sentence_index` (unsigned integer) - zero-based index of the sentence containing the instance

        * `text` (string) - fragment of text containing the instance (only included if the `snippets` [setting](#output-customization) is set to `true`)

        * `tags` (array of strings) - when exists, provides additional detail about the abuse. For instance, if the fragment is classified as an attempt to sell hard drugs, one of the tags will be _hard_drug_.

        * `type` (string) - the type of the abuse

        * `severity` (string) - how severe the abuse is. The levels of severity are `low`, `medium`, `high`, and `extreme`

        * `explanation` (string) - when available, provides rationale for the annotation; set the `explain` setting to `true` to enable.


        The currently supported types are:


        * `personal_attack` - an insult / attack on the addressee, e.g. an instance of cyberbullying. Please note that an attack on a post or a point, or just negative sentiment is not the same as an insult. The line may be blurred at times. See [our Knowledge Base for more information](http://tisane.ai/knowledgebase/how-do-i-detect-personal-attacks/).

        * `bigotry` - hate speech aimed at one of the [protected classes](https://en.wikipedia.org/wiki/Protected_group). The hate speech detected is not just racial slurs, but, generally, hostile statements aimed at the group as a whole

        * `profanity` - profane language, regardless of the intent

        * `sexual_advances` - welcome or unwelcome attempts to gain some sort of sexual favor or gratification

        * `criminal_activity` - attempts to sell or procure restricted items, criminal services, issuing death threats, and so on

        * `external_contact` - attempts to establish contact or payment via external means of communication, e.g. phone, email, instant messaging (may violate the rules in certain communities, e.g. gig economy portals, e-commerce portals)

        * `adult_only` - activities restricted for minors (e.g. consumption of alcohol)

        * `mental_issues` - content indicative of suicidal thoughts or depression (LIMITED)

        * `spam` - (RESERVED) spam content

        * `generic` - undefined


        ### Sentiment Analysis


        The `sentiment_expressions` section is an array of detected fragments indicating the attitude towards aspects or entities. 


        The section exists if sentiment is detected and the `sentiment` [setting](#output-customization) is either omitted or set to `true`.


        Every instance contains the following attributes:


        * `offset` (unsigned integer) - zero-based offset where the instance starts

        * `length` (unsigned integer) - length of the content

        * `sentence_index` (unsigned integer) - zero-based index of the sentence containing the instance

        * `text` (string) - fragment of text containing the instance (only included if the `snippets` setting is set to `true`)

        * `polarity` (string) - whether the attitude is `positive`, `negative`, or `mixed`. Additionally, there is a `default` sentiment used for cases when the entire snippet has been pre-classified. For instance, if a review is split into two portions, _What did you like?_ and _What did you not like?_, and the reviewer replies briefly, e.g. _The quiet. The service_, the utterance itself has no sentiment value. When the calling application is aware of the intended sentiment, the _default_ sentiment simply provides the targets / aspects, which will be then added the sentiment externally. 

        * `targets` (array of strings) - when available, provides set of aspects and/or entities which are the targets of the sentiment. For instance, when the utterance is, _The breakfast was yummy but the staff is unfriendly_, the targets for the two sentiment expressions are `meal` and `staff`. Named entities may also be targets of the sentiment.

        * `reasons` (array of strings) - when available, provides reasons for the sentiment. In the example utterance above (_The breakfast was yummy but the staff is unfriendly_), the `reasons` array for the `staff` is `["unfriendly"]`, while the `reasons` array for `meal` is `["tasty"]`.

        * `explanation` (string) - when available, provides rationale for the sentiment; set the `explain` setting to `true` to enable.


        Example:


        ```json

        "sentiment_expressions": [
                {
                    "sentence_index": 0,
                     "offset": 0,
                     "length": 32,
                     "polarity": "positive",
                     "reasons": ["close"],
                     "targets": ["location"]
                 },
                 {
                    "sentence_index": 0,
                     "offset": 38,
                     "length": 29,
                     "polarity": "negative",
                     "reasons": ["disrespectful"],
                     "targets": ["staff"]
                 }
             ]
        ```


        ### Entities


        The `entities_summary` section is an array of named entity objects detected in the text. 


        The section exists if named entities are detected and the `entities` [setting](#output-customization) is either omitted or set to `true`.


        Every entity contains the following attributes:


        * `name` (string) - the most complete name of the entity in the text of all the mentions

        * `ref_lemma` (string) - when available, the dictionary form of the entity in the reference language (English) regardless of the input language

        * `type` (string) - a string or an array of strings specifying the type of the entity, such as `person`, `organization`, `numeric`, `amount_of_money`, `place`. Certain entities, like countries, may have several types (because a country is both a `place` and an `organization`).

        * `subtype` (string) - a string indicating the subtype of the entity

        * `mentions` (array of objects) - a set of instances where the entity was mentioned in the text


        Every mention contains the following attributes:


        * `offset` (unsigned integer) - zero-based offset where the instance starts

        * `length` (unsigned integer) - length of the content

        * `sentence_index` (unsigned integer) - zero-based index of the sentence containing the instance

        * `text` (string) - fragment of text containing the instance (only included if the `snippets` setting is set to `true`)



        Example:

        ```json
         "entities_summary": [
                {
                    "type": "person",
                     "name": "John Smith",
                     "ref_lemma": "John Smith",
                     "mentions": [
                        {
                            "sentence_index": 0,
                             "offset": 0,
                             "length": 10 }
                     ]
                 }
            ,
                 {
                    "type": [ "organization", "place" ]
                ,
                     "name": "UK",
                     "ref_lemma": "U.K.",
                     "mentions": [
                        {
                            "sentence_index": 0,
                             "offset": 40,
                             "length": 2 }
                     ]
                 }
             ]
        ```


        #### Entity Types and Subtypes


        The currently supported types are: 


        * `person`, with optional subtypes: `fictional_character`, `important_person`, `spiritual_being`

        * `organization` (note that a country is both an organization and a place)

        * `place`

        * `time_range`

        * `date`

        * `time`

        * `hashtag`

        * `email`

        * `amount_of_money`

        * `phone` phone number, either domestic or international, in a variety of formats

        * `role` (a social role, e.g. position in an organization)

        * `software`

        * `website` (URL), with an optional subtype: `tor` for Onion links; note that web services may also have the `software` type assigned

        * `weight`

        * `bank_account` only IBAN format is supported; subtypes: `iban`

        * `credit_card`, with optional subtypes: `visa`, `mastercard`, `american_express`, `diners_club`, `discovery`, `jcb`, `unionpay`

        * `coordinates` (GPS coordinates)

        * `credential`, with optional subtypes: `md5`, `sha-1`

        * `crypto`, with optional subtypes: `bitcoin`, `ethereum`, `monero`, `monero_payment_id`, `litecoin`, `dash`

        * `event`

        * `file` only Windows pathnames are supported; subtypes: `windows`, `facebook` (for images downloaded from Facebook)

        * `flight_code`

        * `identifier`

        * `ip_address`, subtypes: `v4`, `v6`

        * `mac_address`

        * `numeric` (an unclassified numeric entity)

        * `username`



        ### Topics


        The `topics` section is an array of topics (subjects, domains, themes in other terms) detected in the text. 


        The section exists if topics are detected and the `topics` [setting](#output-customization) is either omitted or set to `true`.


        By default, a topic is a string. If `topic_stats` [setting](#output-customization) is set to `true`, then every entry in the array contains:


        * `topic` (string) - the topic itself

        * `coverage` (floating-point number) - a number between 0 and 1, indicating the ratio between the number of sentences where the topic is detected to the total number of sentences


        ### Advanced Low-Level Data: Sentences, Phrases, and Words


        Tisane allows obtaining more in-depth data, specifically:


        * sentences and their corrected form, if a misspelling was detected

        * lexical chunks and their grammatical and stylistic features

        * parse trees and phrases


        The `sentence_list` section is generated if the `words` or the `parses` [setting](#output-customization) is set to `true`. 


        Every sentence structure in the list contains:


        * `offset` (unsigned integer) - zero-based offset where the sentence starts

        * `length` (unsigned integer) - length of the sentence

        * `text` (string) - the sentence itself

        * `corrected_text` (string) - if a misspelling was detected and the spellchecking is active, contains the automatically corrected text

        * `words` (array of structures) - if `words` [setting](#output-customization) is set to `true`, generates extended information about every lexical chunk. (The term "word" is used for the sake of simplicity, however, it may not be linguistically correct to equate lexical chunks with words.)

        * `parse_tree` (object) - if `parses` [setting](#output-customization) is set to `true`, generates information about the parse tree and the phrases detected in the sentence.

        * `nbest_parses` (array of parse objects) if `parses` [setting](#output-customization) is set to `true` and `deterministic` [setting](#output-customization) is set to `false`, generates information about the parse trees that were deemed close enough to the best one but not the best. 


        #### Words


        Every lexical chunk ("word") structure in the `words` array contains:


        * `type` (string) - the type of the element: `punctuation` for punctuation marks, `numeral` for numerals, or `word` for everything else

        * `text` (string) - the text

        * `offset` (unsigned integer) - zero-based offset where the element starts

        * `length` (unsigned integer) - length of the element

        * `corrected_text` (string) - if a misspelling is detected, the corrected form

        * `lettercase` (string) - the original letter case: `upper`, `capitalized`, or `mixed`. If lowercase or no case, the attribute is omitted.

        * `stopword` (boolean) - determines whether the word is a [stopword](https://en.wikipedia.org/wiki/Stop_words)

        * `grammar` (array of strings or structures) - generates the list of grammar features associated with the `word`. If the `feature_standard` [setting] is defined as `native`, then every feature is an object containing a numeral (`index`) and a string (`value`). Otherwise, every feature is a plain string


        ##### Advanced


        For lexical chunks only:


        * `role` (string) - semantic role, like `agent` or `patient`. Note that in passive voice, the semantic roles are reverse to the syntactic roles. E.g. in a sentence like _The car was driven by David_, _car_ is the patient, and _David_ is the agent.

        * `numeric_value` (floating-point number) - the numeric value, if the chunk has a value associated with it

        * `family` (integer number) - the ID of the family associated with the disambiguated word-sense of the lexical chunk

        * `definition` (string) - the definition of the family, if the `fetch_definitions` [setting](#output-customization) is set to `true`

        * `lexeme` (integer number) - the ID of the lexeme entry associated with the disambiguated word-sense of the lexical chunk

        * `nondictionary_pattern` (integer number) - the ID of a non-dictionary pattern that matched, if the word was not in the language model but was classified by the nondictionary heuristics

        * `style` (array of strings or structures) - generates the list of style features associated with the `word`. Only if the `feature_standard` [setting] is set to `native` or `description`

        * `semantics` (array of strings or structures) - generates the list of semantic features associated with the `word`. Only if the `feature_standard` [setting] is set to `native` or `description`

        * `segmentation` (structure) - generates info about the selected segmentation, if there are several possibilities to segment the current lexical chunk and the `deterministic` [setting] is set to `false`. A segmentation is simply an array of `word` structures. 

        * `other_segmentations` (array of structures) - generates info about the segmentations deemed incorrect during the disambiguation process. Every entry has the same structure as the `segmentation` structure.

        * `nbest_senses` (array of structures) - when the `deterministic` [setting] is set to `false`, generates a set of hypotheses that were deemed incorrect by the disambiguation process. Every hypothesis contains the following attributes: `grammar`, `style`, and `semantics`, identical in structure to their counterparts above; and `senses`, an array of word-senses associated with every hypothesis. Every sense has a `family`, which is an ID of the associated family; and, if the `fetch_definitions` [setting](#output-customization) is set to `true`, `definition` and `ref_lemma` of that family.


        For punctuation marks only: 


        * `id` (integer number) - the ID of the punctuation mark

        * `behavior` (string) - the behavior code of the punctuation mark. Values: `sentenceTerminator`, `genericComma`, `bracketStart`, `bracketEnd`, `scopeDelimiter`, `hyphen`, `quoteStart`, `quoteEnd`, `listComma` (for East-Asian enumeration commas like _„ÄÅ_)


        #### Parse Trees and Phrases


        Every parse tree, or more accurately, parse forest, is a collection of phrases, hierarchically linked to each other. 


        At the top level of the parse, there is an array of root phrases under the `phrases` element and the numeric `id` associated with it. Every phrase may have children phrases. Every phrase has the following attributes:


        * `type` (string) - a [Penn treebank phrase tag](http://nliblog.com/wiki/knowledge-base-2/nlp-1-natural-language-processing/penn-treebank/penn-treebank-phrase-level-tags/) denoting the type of the phrase, e.g. _S_, _VP_, _NP_, etc.

        * `family` (integer number) - an ID of the phrase family

        * `offset` (unsigned integer) - a zero-based offset where the phrase starts

        * `length` (unsigned integer) - the span of the phrase

        * `role` (string) - the semantic role of the phrase, if any, analogous to that of the words

        * `text` (string) - the phrase text, where the phrase members are delimited by the vertical bar character. Children phrases are enclosed in brackets. E.g., _driven|by|David_ or _(The|car)|was|(driven|by|David)_.


        Example:


        ```json

        "parse_tree": {

        "id": 4,

        "phrases": [

        {
                "type": "S",
                "family": 1451,
                "offset": 0,
                "length": 27,
                "text": "(The|car)|was|(driven|by|David)",
                "children": [
                        {
                                "type": "NP",
                                "family": 1081,
                                "offset": 0,
                                "length": 7,
                                "text": "The|car",
                                "role": "patient"
                        },
                        {
                                "type": "VP",
                                "family": 1172,
                                "offset": 12,
                                "length": 15,
                                "text": "driven|by|David",
                                "role": "verb"
                        }
                ]
        }

        ```


        #### Context-Aware Spelling Correction


        Tisane supports automatic, context-aware spelling correction. Whether it's a misspelling or a purported obfuscation, Tisane attempts to deduce the intended meaning, if the language model does not recognize the word. 


        When or if it's found, Tisane adds the `corrected_text` attribute to the word (if the words / lexical chunks are returned) and the sentence (if the sentence text is generated). Sentence-level `corrected_text` is displayed if `words` or `parses` are set to _true_.


        Note that as Tisane works with large dictionaries, you may need to exclude more esoteric terms by using the `min_generic_frequency` setting. 


        Note that **the invocation of spell-checking does not depend on whether the sentences and the words sections are generated in the output**. The spellchecking can be disabled by [setting](#content-cues-and-instructions) `disable_spellcheck` to `true`. Another option is to enable the spellchecking for lowercase words only, thus excluding potential proper nouns in languages that support capitalization; to avoid spell-checking capitalized and uppercase words, set `lowercase_spellcheck_only` to `true`.

      operationId: 5a3b7177a3511b11cc29265c
      requestBody:
        content:
          application/json:
            example:
              content: Babylonians should not be allowed at managerial positions.
              language: en
              settings:
                parses: false
        description: >
          A request is made of three elements:

            + `language` - a standard IETF tag for the language to analyze; if the language is unknown, use `*` or the list of likely language codes separated by a vertical bar, e.g. `en|es|ko`
            + `content` - a content to analyze
            + `settings` - the settings to apply when analyzing

          ### Settings Reference


          The purpose of the settings structure is to:

            * [provide cues about the content being sent to improve the results](#content-cues-and-instructions)
            * [customize the output and select sections to be shown](#output-customization)
            * [define standards and formats in use](#standards-and-formats)
            * [define and calculate the signal to noise ranking](#signal-to-noise-ranking)


          All settings are optional. To leave all settings to default, simply provide an empty object (`{}`).


          #### Content Cues and Instructions


          `format` (string) - the format of the content. Some policies will be applied depending on the format. Certain logic in the underlying language models may require the content to be of a certain format (e.g. logic applied on the reviews may seek for sentiment more aggressively). The default format is empty / undefined. The format values are:


          * `review` - a review of a product or a service or any other review. Normally, the underlying language models will seek for sentiment expressions more aggressively in reviews.

          * `dialogue` - a comment or a post which is a part of a dialogue. An example of a logic more specific to a dialogue is name calling. A single word like "idiot" would not be a personal attack in any other format, but it is certainly a personal attack when part of a dialogue.

          * `shortpost` - a microblogging post, e.g. a tweet.

          * `longform` - a long post or an article.

          * `proofread` - a post which was proofread. In the proofread posts, the spellchecking is switched off. 

          * `alias` - a nickname in an online community. 

          * `search` - a search query. Search queries may not always be grammatically correct. Certain topics and items, that we may otherwise let pass, are tagged with the `search` format.


          `disable_spellcheck` (boolean) - determines whether the automatic spellchecking is to be disabled. Default: `false`.


          `lowercase_spellcheck_only` (boolean) - determines whether the automatic spellchecking is only to be applied to words in lowercase. Default: `false`


          `min_generic_frequency` (int) - allows excluding more esoteric terms; the valid values are 0 thru 10.


          `subscope` (boolean) - enables sub-scope parsing, for scenarios like hashtag, URL parsing, and obfuscated content (e.g. _ihateyou_). Default: `false`.


          `domain_factors` (set of pairs made of strings and numbers) - provides a session-scope cues for the domains of discourse. This is a powerful tool that allows tailoring the result based on the use case. The format is, family ID of the domain as a key and the multiplication factor as a value (e.g. _"12345": 5.0_). For example, when processing text looking for criminal activity, we may want to set domains relevant to drugs, firearms, crime, higher: `"domain_factors": {"31058": 5.0, "45220": 5.0, "14112": 5.0, "14509": 3.0, "28309": 5.0, "43220": 5.0, "34581": 5.0}`. The same device can be used to eliminate noise coming from domains we know are irrelevant by setting the factor to a value lower than 1. 


          `when` (date string, format YYYY-MM-DD) - indicates when the utterance was uttered. (TO BE IMPLEMENTED) The purpose is to prune word senses that were not available at a particular point in time. For example, the words _troll_, _mail_, and _post_ had nothing to do with the Internet 300 years ago because there was no Internet, and so in a text that was written hundreds of years ago, we should ignore the word senses that emerged only recently.


          #### Output Customization


          `abuse` (boolean) - output instances of abusive content (default: `true`)


          `sentiment` (boolean) - output sentiment-bearing snippets (default: `true`)


          `document_sentiment` (boolean) - output document-level sentiment (default: `false`)


          `entities` (boolean) - output entities (default: `true`)


          `topics` (boolean) - output topics (default: `true`), with two more relevant settings:

           * `topic_stats` (boolean) - include coverage statistics in the topic output (default: `false`). When set, the topic is an object containing the attributes `topic` (string) and `coverage` (floating-point number). The coverage indicates a share of sentences touching the topic among all the sentences. 
           * `optimize_topics` (boolean) - if `true`, the less specific topics are removed if they are parts of the more specific topics. For example, when the topic is `cryptocurrency`, the optimization removes `finance`.  


           
          `words` (boolean) - output the lexical chunks / words for every sentence (default: `false`). In languages without white spaces (Chinese, Japanese, Thai), the tokens are tokenized words. In languages with compounds (e.g. German, Dutch, Norwegian), the compounds are split. 

            `fetch_definitions` (boolean) - include definitions of the words in the output (default: `false`). Only relevant when the `words` setting is `true`

          `parses` (boolean) - output parse forests of phrases


          `deterministic` (boolean) - whether the n-best senses and n-best parses are to be output in addition to the detected sense. If `true`, only the detected sense will be output. Default: `true`


          `snippets` (boolean) - include the text snippets in the abuse, sentiment, and entities sections (default: `false`)


          `explain` (boolean) - if `true`, a reasoning for the abuse and sentiment snippets is provided when possible (see the `explanation` attribute)


          #### Standards and Formats


          `feature_standard` (string) - determines the standard used to output the features (grammar, style, semantics) in the response object. The standards we support are: 


          * `ud`: [Universal Dependencies tags](https://universaldependencies.org/u/pos/) (default)

          * `penn`: [Penn treebank tags](https://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html)

          * `native`: Tisane native feature codes

          * `description`: Tisane native feature descriptions


          Only the native Tisane standards (codes and descriptions) support style and semantic features.


          `topic_standard` (string) - determines the standard used to output the topics in the response object. The standards we support are:


          * `iptc_code` - IPTC topic taxonomy code

          * `iptc_description` - IPTC topic taxonomy description

          * `iab_code` - IAB topic taxonomy code

          * `iab_description` - IAB topic taxonomy description

          * `native` - Tisane domain description, coming from the family description (default)


          `sentiment_analysis_type` (string) - (RESERVED) the type of the sentiment analysis strategy. The values are:


          * `products_and_services` - most common sentiment analysis of products and services

          * `entity` - sentiment analysis with entities as targets

          * `creative_content_review` - reviews of creative content

          * `political_essay` - political essays


          #### Signal to Noise Ranking


          When we're studying a bunch of posts commenting on an issue or an article, we may want to prioritise the ones more relevant to the topic, and containing more reason and logic than emotion. This is what the signal to noise ranking is meant to achieve.


          The signal to noise ranking is made of two parts:


          1. Determine the most relevant concepts. This part may be omitted, depending on the use case scenario (e.g. we want to track posts most relevant to a particular set of issues). 

          2. Rank the actual post in relevance to these concepts. 


          To determine the most relevant concepts, we need to analyze the headline or the article itself. The headline is usually enough. We need two additional settings:


          * `keyword_features` (an object of strings with string values) - determines the features to look for in a word. When such a feature is found, the family ID is added to the set of potentially relevant family IDs. 

          * `stop_hypernyms` (an array of integers) - if a potentially relevant family ID has a hypernym listed in this setting, it will not be considered. For example, we extracted a set of nouns from the headline, but we may not be interested in abstractions or feelings. E.g. from a headline like _Fear and Loathing in Las Vegas_ we want _Las Vegas_ only. Optional.


          If `keyword_features` is provided in the settings, the response will have a special attribute, `relevant`, containing a set of family IDs. 


          At the second stage, when ranking the actual posts or comments for relevance, this array is to be supplied among the settings. The ranking is boosted when the domain, the hypernyms, or the families related to those in the `relevant` array are mentioned, when negative and positive sentiment is linked to aspects, and penalized when the negativity is not linked to aspects, or abuse of any kind is found. The latter consideration may be disabled, e.g. when we are looking for specific criminal content. When the `abuse_not_noise` parameter is specified and set to `true`, the abuse is not penalized by the ranking calculations. 


          To sum it up, in order to calculate the signal to noise ranking: 


          1. Analyze the headline with `keyword_features` and, optionally, `stop_hypernyms` in the settings. Obtain the `relevant` attribute.

          2. When analyzing the posts or the comments, specify the `relevant` attribute obtained in step 1. 
      responses:
        "200":
          content:
            application/json:
              example:
                text: An inertial force is a force that resists a change in velocity of an
                  object.
                topics:
                  - physics
          description: >-
            Extract topics only:


            `{"language":"en", "content":"An inertial force is a force that resists a change in velocity of an object.", "settings":{}}`
      summary: Analyze text
  /similarity:
    post:
      description: Calculate semantic similarity between two text fragments, in the
        same language or in two different languages.
      operationId: semantic-similarity
      requestBody:
        content:
          application/json:
            example:
              content1: Franz Ferdinand was assassinated by a Serbian revolutionary
              content2: A Yugoslav radical assassinated Franz Ferdinand
              language1: en
              language2: en
              settings: {}
        description: >-
          The request body contains the following nodes:


          * `content1` (string) - a text fragment

          * `language1` (string) - the IETF language code for `content1`

          * `content2` (string) - a text fragment to compare with

          * `language2` (string) - the IETF language code for `content2`

          * `settings` (structure) - the settings object; same specs as in [/parse method](/docs/services/5a3b6668a3511b11cc292655/operations/5a3b7177a3511b11cc29265c?#settings-reference)
      responses:
        "200":
          content:
            application/json:
              example: 0.8341
          description: A number in range 0 thru 1 indicating the similarity of the
            submitted text fragments.
      summary: Semantic similarity
  /text2picture:
    post:
      description: |-
        Finds a URL of an image (Creative Commons) best describing the text. 

        *WARNING*: may be slow, as Wikimedia servers are queried.
      operationId: generate-illustration-for-text
      requestBody:
        content:
          application/json:
            example:
              content: The largest Scandinavian country by area is Sweden. This nation is also
                the most populous with a population exceeding 10 million. Its
                capital is Stockholm
              language: en
        description: >+
          The request body is a JSON structure made of two elements:


          * `language` (string) - a standard IETF tag for the language to analyze

          * `content` (string) - a content to analyze

      responses:
        "200":
          content:
            application/json:
              example: https://upload.wikimedia.org/wikipedia/commons/7/7b/Stockholm_gamlastan_etc.jpg
          description: A JSON-escaped URL of a Creative Commons image on Wikimedia
            servers, if exists. Null if no image is found.
      summary: Generate image from text
  /transform:
    post:
      description: >
        The method translates the input in the source language to the
        target language. 


        The request body is a JSON structure made of three elements:


        * `from` (string) - a standard IETF tag for the source language. To invoke autodetect, use `*`

        * `to` (string) - a standard IETF tag for the target language

        * `content` (string) - a content to analyze

        * `settings` (structure) - the [settings](#settings-reference) to apply when analyzing
      operationId: translate
      requestBody:
        content:
          application/json:
            example:
              content: Ê±™‰∏ñÊù∞
              from: "*"
              settings:
                entity: person
              to: en
      responses:
        "200":
          content:
            application/json:
              example: Wang Shi Jie
          description: "The translation. "
      summary: Translate
components:
  schemas:
    settings:
      properties:
        abuse:
          type: boolean
      type: object
  securitySchemes:
    apiKeyHeader:
      in: header
      name: Ocp-Apim-Subscription-Key
      type: apiKey
    apiKeyQuery:
      in: query
      name: subscription-key
      type: apiKey
